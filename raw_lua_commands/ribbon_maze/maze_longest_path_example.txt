-- 1 is valid path, 0 is wall
local maze = {
 {0, 0, 0, 0, 0, 0, 0, 0, 0},
 {0, 1, 0, 1, 0, 1, 1, 1, 0},
 {0, 1, 1, 1, 1, 0, 0, 1, 0},
 {0, 0, 1, 0, 1, 1, 1, 1, 0},
 {0, 0, 1, 0, 1, 0, 0, 1, 0},
 {0, 0, 0, 0, 0, 0, 0, 0, 0},
}
local map_width = 9

function copy_maze(obj)
    local out = {}
    for _,row in ipairs(obj) do
        table.insert(out,{})
        for _,v in ipairs(row) do
            table.insert(out[#out], v)
        end
    end
  return out
end

local start_x = math.floor((map_width-1)/2)+1
local start_y = #maze -1

WALL = 0
EMPTY = 1
VISITED = 2

local function longest_path(inp)
    local longest = ''
    local max_length = 0
    for _, path in ipairs(inp) do
        if string.len(path) > max_length then
            max_length = string.len(path)
            longest = path
        end
    end
    
    return longest

end

local function solve(inp_grid, x, y)
    grid = copy_maze(inp_grid)

    if grid[y][x] == WALL or grid[y][x] == VISITED then
        return 'w'
    end
    grid[y][x] = VISITED

    local candidates = {}
    if x+1 <= #grid[y] and grid[y][x+1] ~= VISITED and grid[y][x+1] ~= WALL then
        table.insert(candidates, 'r' .. solve(grid, x+1, y))
    end
    if y-1 >= 1 and grid[y-1][x] ~= VISITED and grid[y-1][x] ~= WALL then
        table.insert(candidates, 'u' .. solve(grid, x, y-1))
    end
    if x-1 >= 1 and grid[y][x-1] ~= VISITED and grid[y][x-1] ~= WALL then
        table.insert(candidates, 'l' .. solve(grid, x-1, y))
    end
    if y+1 <= #grid and grid[y+1][x] ~= VISITED and grid[y+1][x] ~= WALL then
        table.insert(candidates, 'd' .. solve(grid, x, y+1))
    end


    if #candidates == 0 then
        grid[y][x] = 'w'
    else
        grid[y][x] = longest_path(candidates)
    end
    return grid[y][x]
end

game.player.print(solve(maze, start_x, start_y))
